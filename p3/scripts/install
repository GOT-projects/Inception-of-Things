#!/bin/bash
# Set default values
CLUSTER_NAME=mycluster
WAIT_TIMEOUT=600s
idx=0

# Function to print a message with the index number
print_msg() {
    idx=$((idx+1))
    echo -e "\033[32m[$idx] $1\033[0m"
}

# Function to check if a command exists and install it if necessary
check_command() {
  for command in "$@"; do
    if ! [ -x "$(command -v $command)" ]; then
      print_msg "Installing $command"
      case $command in
        docker)
           apt-get remove docker docker-engine docker.io containerd runc
           apt-get -y update
           apt-get -y install \
            ca-certificates \
            curl \
            gnupg
           install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg
           chmod a+r /etc/apt/keyrings/docker.gpg
          echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
           tee /etc/apt/sources.list.d/docker.list > /dev/null
           apt-get -y update
           apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          ;;
        k3d)
          wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          ;;
        kubectl)
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          # Output must be "kubectl: Ok"
           install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          rm -f kubectl kubectl.sha256
          ;;
      esac
    fi
  done
}

# Function to delete the cluster and namespaces
delete_cluster() {
  print_msg "Deleting namespaces"
   kubectl delete namespace argocd dev --ignore-not-found=true
  print_msg "Deleting cluster"
   k3d cluster delete $CLUSTER_NAME
}

# Function to create the cluster and deploy ArgoCD and the app
# # Function to create the cluster and deploy ArgoCD and the app
install_argo() {
  print_msg "Creating cluster"
  k3d cluster create $CLUSTER_NAME --wait --timeout 120s

  print_msg "Creating namespaces"
  kubectl create namespace argocd
  kubectl create namespace dev

  print_msg "Deploying ArgoCD"
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  print_msg "Waiting ArgoCD"
  kubectl wait --timeout $WAIT_TIMEOUT --for=condition=Ready pods --all -n argocd
  print_msg "Patch ArgoCD to LoadBalancer"
  kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer", "loadBalancerIP": "10.10.10.10"}}'

  print_msg "Deploying app"
  kubectl apply -f ./config/configs.yml
  print_msg "Waiting app"
  kubectl wait --timeout $WAIT_TIMEOUT --for=condition=Ready pods --all -n argocd
  print_msg "Getting admin password"
  password=""
  while [ -z "$password" ]; do
      password=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)
      
      if [ -z "$password" ]; then
          echo "Error: get password. try again in few second..."
          sleep 5
      fi
  done
  IP=$(kubectl get svc -n argocd | grep LoadBalancer | awk '{ print $4}')
  echo "ArgoCD: https://${IP}"
  printf "\n\n\tadmin\n\t%s\n" "$password"
}

check_command docker k3d kubectl
delete_cluster
install_argo
echo "deploy done!!\nFor start ArgoCD: install start"
